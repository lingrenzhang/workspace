搭车网站设计(技术）备案


一.核心对象
1.用户
    标识：用户 唯一id
    内容：用户信息
    关联：加载行程时生成(多个）对行程索引

2.行程
    标识：行程唯一ID
    内容：1.始末地点，距离预估行驶时间
          2.时间
          3.费用
    关联：1个用户

3.参与者行程
    标识：唯一id，同内在行程
    内容：1.行程状态 （是否被批准，交易到何种程度，etc）
          2.与主行程匹配度
    关联：1.1个内在行程
          2.1个关联主题行程

4.主题行程
   （辅助索引检测）
    内容：可设置中间途径//重要改进feature
    关联：1.1个内在行程
          2.多个参与行程

5.讨论组
     访问模式：主题行程模式、参与者行程模式
     内容：
         1.时间、参与人员表
         2.成交金额

     关联：
         1.一个主要行程
         2.多个参与行程
         3.请求行程队列

6.消息
     标识：1.主题id（非唯一）             两个hash表根据id指向链表
           2.目标用户id（非唯一）
 
     内容：1.消息内容
           2.生成时间

     关联：1.发出者
           2.收到者
           3.关联主题



    

二。视图相关
视图生成时根据访问者状态确定
生命周期以session为准
     1.游客视角
          只能看广告，简单索引和看讨论（）

     2.用户视角
 	  状态：1.唯一当前活动行程
                2.唯一当前参与主题
      观看内容：1.查看修改用户profile
                2.查看修改自己的行程（包括相关消息）
                3.查看讨论组

      3.管理员视角：。。。

三。控制相关
1.讨论组内容变化时，生成系统记录
      a.有用户状态变化
      b.用户留言

基本数据结构（参考 - 开发阶段，主要考虑功能）
1.在线用户表，行程，讨论组，用hash表维护，额外生命周期控制上线后看
  所有用户表暂时放在系统内，因为使用过于平凡，可以在其他对象中增加字段-索引 来减少对所有用户表的访问，已放入持久存储。 （责任链模式处理？）

2.消息队列，使用讨论组入口分类后，链表存储。消息一旦持久存储，除非用到，加载时不放入内存。

四。算法相关
1. 基于时间的匹配
2. 基于地点的匹配
3. 基于交易信息（价格）的匹配


系统初始化：
1.用户表
2.行程表
3.参与行程表
4.讨论组表